安装准备环境，包括编译环境，以及nginx和php7依赖的一些包。
编译环境我安装了以下三个
yum install gcc gcc-c++ autoconf openssl openssl-devel zlib zlib-devel libxml2 libxml2-devel pcre-deve libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers gdbm-devel libXpm-devel libmcrypt libmcrypt-devel libxslt-devel* perl-ExtUtils-Embed
最后的pcre centos7中应该默认是安装了一个，devel是pcre的开发包，我们需要的是这个包，如果没有安装-devel的包，编译的时候一样会提示没有安装pcre。

MySQL编译安装
# rpm -qa | grep mysql   #是否安装了mysql
# rpm -e mysql　　// 普通删除模式
# rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除# 
# 
# groupadd -g 3306 mysql 
# useradd mysql -u 3306 -g 3306 -d /nonexistent -s /sbin/nologin
# 
# cd /usr/local/src
# wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.29.tar.gz
# tar xvf mysql-5.6.29.tar.gz
# cd mysql-5.6.29
# cmake . -DCMAKE_INSTALL_PREFIX=/data/mysql -DMYSQL_UNIX_ADDR=/data/mysql/run/mysql.sock  -DDEFAULT_CHARSET=utf8  -DDEFAULT_COLLATION=utf8_general_ci  -DWITH_INNOBASE_STORAGE_ENGINE=1  -DWITH_READLINE=1  -DENABLED_LOCAL_INFILE=1  -DMYSQL_DATADIR=/data/mysql/data  -DMYSQL_USER=mysql  -DMYSQL_TCP_PORT=3306  -DWITH_EXTRA_CHARSETS=all
# make && make install && make clean
# 
注意：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会搜索"$basedir/my.cnf"，在本例中就是 /data/mysql/my.cnf，这是新版MySQL的配置文件的默认位置！
注意：在CentOS 6.4版操作系统的最小安装完成后，在/etc目录下会存在一个my.cnf，需要将此文件更名为其他的名字，如：/etc/my.cnf.bak，否则，该文件会干扰源码安装的MySQL的正确配置，造成无法启动。
注意：在使用"yum update"更新系统后，需要检查下/etc目录下是否会多出一个my.cnf，如果多出，将它重命名成别的。否则，MySQL将使用这个配置文件启动，可能造成无法正常启动等问题。
#
# rm /etc/my.cnf
#
# vi /data/mysql/my.cnf
#
###################### start my.cnf ###########################
# For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the
# *** default location during install, and will be replaced if you
# *** upgrade to a newer version of MySQL.

[client]
port=3306
socket=/data/mysql/run/mysql.sock

[mysqld]

# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
# innodb_buffer_pool_size = 128M

# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin

# These are commonly set, remove the # and set as required.
user = mysql
basedir = /data/mysql
datadir = /data/mysql/data
port=3306
server-id = 1
socket=/data/mysql/run/mysql.sock

character-set-server = utf8
log-error = /log/mysql/error.log
pid-file = /data/mysql/run/mysql.pid
general_log = 1
skip-name-resolve
#skip-networking
back_log = 300

max_connections = 1000
max_connect_errors = 6000
open_files_limit = 65535
table_open_cache = 128 
max_allowed_packet = 4M
binlog_cache_size = 1M
max_heap_table_size = 8M
tmp_table_size = 16M

read_buffer_size = 2M
read_rnd_buffer_size = 8M
sort_buffer_size = 8M
join_buffer_size = 28M
key_buffer_size = 4M
thread_cache_size = 8
query_cache_type = 1
query_cache_size = 8M
query_cache_limit = 2M
ft_min_word_len = 4
log_bin = mysql-bin
binlog_format = mixed
expire_logs_days = 30
performance_schema = 0
explicit_defaults_for_timestamp
#lower_case_table_names = 1
myisam_sort_buffer_size = 8M
myisam_repair_threads = 1
interactive_timeout = 28800
wait_timeout = 28800
# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size = 128M
# sort_buffer_size = 2M
# read_rnd_buffer_size = 2M 

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

# Recommended in standard MySQL setup
sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER,STRICT_TRANS_TABLES 

[mysqldump]
quick
max_allowed_packet = 16M

[myisamchk]
key_buffer_size = 8M
sort_buffer_size = 8M
read_buffer = 4M
write_buffer = 4M
########################## end my.cnf ############################
#
# mkdir /log/mysql/
# mkdir /data/mysql/run
# chown -R mysql:mysql /data/mysql/

# /data/mysql/scripts/mysql_install_db --user=mysql --basedir=/data/mysql --datadir=/data/mysql/data & 
# /data/mysql/bin/mysqld_safe &
# /data/mysql/bin/mysql -uroot -p  #输入密码的时候，直接回车
mysql> use mysql;
mysql> UPDATE `user` SET `Password`=PASSWORD('123456') WHERE `User`='root';
mysql> flush privileges;
# 
# ps -ef | grep mysql                #查找mysql的pid
mysql     54778  54702  0 15:59 pts/1    00:00:00 /data/mysql/bin/mysqld
# cat /data/mysql/run/mysql.pid  #查找mysql的pid
54778
# kill 54778       #结束mysql进程
# 
# ps -aux | grep mysql
#

启动MySQL
     创建mysqld

     support-files目录下有一个mysql.server，可以通过该文件启动MySQL服务器./support-files/mysql.server start。更常用的是将MySQL配置为系统服务，       首先将其复制到/etc/init.d/目录并重命名为mysqld：

     $ cp support-files/mysql.server /etc/init.d/mysqld
     添加开机启动服务

     使用chkconfig将mysqld添加为开机自启动服务：

     $ chkconfig --add mysqld
     检查添加是否成功：

     $ chkconfig --list mysqld
     mysqld         	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭
     启动MySQL服务器

     添加为系统服务后，就可以通过service命令来启动MySQL服务器：

     $ service mysqld start
     检查启动是否成功：

     $ netstat -anp|grep mysqld
     tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      17307/mysqld        
     unix  2      [ ACC ]     STREAM     LISTENING     831113 17307/mysqld        /tmp/mysql.sock

PHP编译安装
#
# cd /usr/local/src/
# wget http://mirrors.sohu.com/php/php-7.0.4.tar.gz
# tar -zxvf php-7.0.4.tar.gz
# cd php-7.0.4
# ./configure --prefix=/data/php --with-gdbm --with-fpm-group=www --with-fpm-user=www --with-gettext --with-pear --enable-pcntl --enable-ftp --enable-sysvsem --enable-shmop --enable-bcmath --enable-shared --disable-rpath --enable-debug --with-openssl --with-mhash --with-mcrypt --with-mysql-sock=/data/mysql/run/mysql.sock --with-config-file-path=/data/php/etc --mandir=/data/php/man --libdir=/data/php/lib --includedir=/data/php/include --sbindir=/data/php/sbin --bindir=/data/php/bin --with-gd --with-jpeg-dir --with-freetype-dir --enable-sockets --enable-fpm --enable-mbstring --enable-soap --with-iconv-dir --with-png-dir --with-zlib --with-libxml-dir --with-curl --enable-gd-native-ttf --with-xmlrpc --enable-zip --enable-mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-bz2 --with-xsl --with-xpm-dir
# 
# make clean && make && make test && make install && make clean 
#
# mkdir /log/php
# mkdir /data/php/session
# mkdir /data/php/run
# groupadd -g 80 www
# useradd www -u 80 -g 80 -d /nonexistent -s /sbin/nologin
#
# cp php.ini-production /data/php/etc/php.ini
# cp sapi/fpm/init.d.php-fpm /data/php/etc/php-fpm  #因为php5.3开始自带fpm，使用自带的管理脚本
# cd /data/php/etc/
# chmod 755 php-fpm
# cp php-fpm.conf.default php-fpm.conf
# vi php-fpm.conf
# 
###############   php-fpm.conf相关内容改成如下   ##############
pid = /data/php/run/php-fpm.pid
error_log = /log/php/php-fpm.log
##############################################################
# 
# chown -R www:www /data/php
# chown -R www:www /log/php
# vi php.ini
# 
##################   php.ini相关内容改成如下   ################
error_log = /log/php/php_errors.log
upload_max_filesize = 8M
extension_dir = "/data/php/include/php/ext"
cgi.fix_pathinfo=0
############################################################### 
# 
# cp /data/php/etc/php-fpm.d/www.conf.default /data/php/etc/php-fpm.d/www.conf
# vi /data/php/etc/php-fpm.d/www.conf
#
##################   www.conf相关内容改成如下   ################
access.log = /log/php/$pool.access.log
##################   www.conf  end   ################
#
# vi /data/php/etc/php-fpm
##################   php-fpm  ################
php_fpm_PID=${prefix}/run/php-fpm.pid
##################   php-fpm  end   ################
# /data/php/etc/php-fpm start
#
# 


Nginx编译安装
#
# cd /usr/local/src
# wget http://mirrors.sohu.com/nginx/nginx-1.9.9.tar.gz
# tar -zxvf nginx-1.9.9.tar.gz
# cd nginx-1.9.9
# ./configure --prefix=/data/nginx --sbin-path=/data/nginx/sbin/nginx --conf-path=/data/nginx/conf/nginx.conf --error-log-path=/log/nginx/error.log --pid-path=/data/nginx/run/nginx.pid --lock-path=/data/nginx/run/nginx.lock --http-log-path=/log/nginx/access.log --user=www --group=www --with-http_ssl_module --with-http_dav_module --with-http_flv_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module --with-http_stub_status_module --with-http_sub_module --with-http_random_index_module --with-http_degradation_module --with-http_secure_link_module --with-http_gzip_static_module --with-http_perl_module --with-pcre --with-file-aio --with-mail --with-mail_ssl_module --http-client-body-temp-path=/data/nginx/run/client_body --http-proxy-temp-path=/data/nginx/run/proxy --http-fastcgi-temp-path=/data/nginx/run/fastcgi --http-uwsgi-temp-path=/data/nginx/run/uwsgi --http-scgi-temp-path=/data/nginx/run/scgi --with-stream --with-ld-opt="-Wl,-E"  --with-debug
# make && make install && make clean
#
# cat /proc/cpuinfo   #查看cpu核心数
修改Nginx配置文件nginx.conf 
# 
# mv /data/nginx/conf/nginx.conf /data/nginx/conf/nginx_bak.conf
# vi /data/nginx/conf/nginx.conf
添加以下内容
# 
################   nginx.conf   #########################
user  www www;
worker_processes 2;   #进程数，与CPU核心数对应(包括逻辑核心)，IO开销不大的设置为1也没问题
#error_log  /data/nginx/logs/error.log  crit;
error_log  /log/nginx/error.log  info;
pid        /data/nginx/run/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 51200;

events
{
     use epoll;
     worker_connections 51200;	#单进程最大连接数
     #debug_connection   192.168.1.161;	#只对来自192.168.1.161的连接进行调试信息的记录
}

http
{
     include       mime.types;
     default_type  application/octet-stream;
     charset  utf-8;
     #charset  gb2312;
     server_names_hash_bucket_size 128;
     sendfile on;
     tcp_nopush     on;
     keepalive_timeout 60;
     tcp_nodelay on;

     #fastcgi_connect_timeout 60;
     #fastcgi_send_timeout 180;
     #fastcgi_read_timeout 180;
     #20080730 by milala
     #for 502 error (bad gateway)
     fastcgi_connect_timeout 300;
     fastcgi_send_timeout 300;
     fastcgi_read_timeout 300;
     client_max_body_size 100m;

     #20090114 by milala for 400 error
     client_header_buffer_size 128k;
     large_client_header_buffers 4 128k;

     fastcgi_buffer_size 128k;
     fastcgi_buffers 4 128k;
     fastcgi_busy_buffers_size 128k;
     fastcgi_temp_file_write_size 128k;
     fastcgi_temp_path /tmp;

     gzip on;
     gzip_min_length  1k;
     gzip_buffers     4 8k;
     gzip_http_version 1.1;
     gzip_comp_level 3;
     #20090304milala
     #gzip_types  text/plain application/x-javascript text/css text/html application/xml application/x-httpd-php !application/x-httpd-jphp;
     #gzip_types  text/plain text/css application/xml;
     gzip_types text/plain text/css application/xml text/javascript application/javascript application/x-javascript application/x-httpd-php;
     gzip_disable "MSIE [1-6]\.";

     #log_format  access  '$remote_addr $server_name - $remote_user [$time_local] "$request" '
     log_format  access  '$remote_addr - $remote_user [$time_local] $server_name "$request" '
                                   '$status $body_bytes_sent "$http_referer" '
                                   '"$http_user_agent"';
     #access_log  /data/nginx/logs/nginx.log  access;
     access_log  /log/nginx/nginx.log  access;

     index index.html index.htm index.php;
     #error_page   404    http://www.lg69.com/404.html;

     include       /data/nginx/conf/pub/*.conf;
     #include       pub/*.conf;
     #include       private/*.conf;
}
################   nginx.conf   ######################### 
# 
添加一个网站配置文件localhost.conf
#
# 
# mkdir /data/nginx/conf/pub
# vi /data/nginx/conf/pub/localhost.conf
# 
################   localhost.conf   #########################
server
{
    listen       80;
    server_name  localhost 127.0.0.1 192.168.1.220;
    root         /site/domain/localhost/htdocs;
    index index.php index.html index.htm;
    location ~  .*\.(php|jphp)?$
    {
        include fastcgi.conf;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
    }
#    if ($request_filename !~ "s|g|fckeditor|new\.(js|htc|ico|gif|jpg|png|css|php|htm)$")
#    {
#        rewrite ^/(.*) /public_index.php?k=$1 last;
#    }
    rewrite "^/(.*)\.pl"    /init.php?$1 last;
    access_log  /log/domain/localhost/access.log  access;
} 
################   localhost.conf   #########################
# 
# 
配置nginx的fastcgi.conf文件
# 
# mv /data/nginx/conf/fastcgi.conf /data/nginx/conf/fastcgi.conf.bak
# vi /data/nginx/conf/fastcgi.conf
################   fastcgi.conf   #########################
fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx;

fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;
# PHP only, required if PHP was built with --enable-force-cgi-redirect force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
################   fastcgi.conf  end   ##########################
# 
# mkdir /log/domain
# mkdir /log/domain/localhost
# mkdir /site/domain/localhost
# mkdir /site/domain/localhost/htdocs
# chown -R www:www /log/domain
# chown -R www:www /log/nginx
# vi /site/domain/localhost/htdocs/index.htm
# 
################   index.htm   #########################
1234
################   index.htm   #########################
# 
# /data/nginx/sbin/nginx
# 测试一下页面能否打开
# 
# 


